namespace = suelg_deep_scan

#From = Planet/starbase scope
#This = Ship scope
#on_fleet_enter_orbit
fleet_event = {
    id = suelg_deep_scan.1
    hide_window = yes
    is_triggered_only = yes
	trigger = {
		# log = ">> CHECK ORBIT FROM: [from.GetName] THIS: [This.GetName] ROOT: [root.GetName]"

		From = { # planet/starbase
			is_scope_type = planet

			is_star = yes
			solar_system = {
				has_owner = yes
			}
		}
		This = { # ship
			OR = {
				is_scope_type = ship
				is_scope_type = fleet
			}
			
			is_in_combat = no

			exists = leader
			leader = {
				leader_class = scientist
			}
			exists = owner
			owner = {
				is_ai = no
				is_same_value = from.solar_system.owner
			}
		}
	}

    immediate = {
		# log = ">> RUN EVENT - FROM: [from.GetName] THIS: [This.GetName]"
		this = {
			owner = {
				save_event_target_as = t_owner
			}
		}

		from = {
			solar_system = {
				if = {
					limit = {								
						event_target:t_owner = {
							check_variable = { which = suelg_max_scan_level value > 0 }
						}
					}

					system_event = { id = suelg_deep_scan.10 } # Reset system projects and init vars
					system_event = { id = suelg_deep_scan.11 } # Create Deep Scan Projects for system
				}
			}
		}
    }
}

#this = Ship scope
#fromfrom = Planet scope
#from = Ship scope
#suelg_deep_scan_{X}_special_project
ship_event = {
    id = suelg_deep_scan.2
    hide_window = yes
    is_triggered_only = yes

    immediate = {
		# log = ">> PROJECT COMPLETE. FROM: [from.GetName] THIS: [This.GetName] ROOT: [root.GetName] FROMFROM: [fromfrom.GetName]"
		save_event_target_as = t_ship

		leader = {
			save_event_target_as = t_leader
			owner = {
				save_event_target_as = t_owner
			}
		}
		fromfrom = {
			save_event_target_as = t_planet
			set_variable = { which = suelg_completed_scan_lvl value = suelg_started_scan_lvl }
			set_planet_flag = has_completed_project
			planet_event = { id = suelg_deep_scan.5 } # Calculate the chance for an orbital deposit to spawn 
			planet_event = { id = suelg_deep_scan.3 } # Calculate the chance for an Archaeological site to spawn 
			planet_event = { id = suelg_deep_scan.4 } # Calculate the chance for an anomaly to spawn 
			planet_event = { id = suelg_deep_scan.8 } # Complete scan
		}
    }
}

# Calculate the chance for an Archaeological site to spawn 
planet_event = {
    id = suelg_deep_scan.3
    hide_window = yes
    is_triggered_only = yes

    immediate = {
		set_variable = { which = suelg_digsite_chance value = @suelg_spawn_archaeological_site_chance }
		inline_script = { script = suelg_add_ch_trait N = suelg_digsite_chance T = leader_trait_archaeologist V = 0.1 }
		inline_script = { script = suelg_add_ch_trait N = suelg_digsite_chance T = leader_trait_archaeologist_2 V = 0.2 }
		inline_script = { script = suelg_add_ch_trait N = suelg_digsite_chance T = leader_trait_collective_wisdom V = 0.05 }
		inline_script = { script = suelg_add_ch_trait N = suelg_digsite_chance T = leader_trait_collective_wisdom_2 V = 0.1 }
		inline_script = { script = suelg_add_ch_trait N = suelg_digsite_chance T = leader_trait_collective_wisdom_3 V = 0.15 }
		inline_script = { script = suelg_add_ch_trait N = suelg_digsite_chance T = leader_trait_frontier_adventurer V = 0.1 }

		set_variable_to_random_value = { which = suelg_dice min = 0 max = 100 rounded = no }

		# log = ">> ROLL Archaeological site. DICE: [This.suelg_dice] CHANCE: [This.suelg_digsite_chance]"
		if = {
			limit = {
				check_variable = { which = suelg_dice value <= suelg_digsite_chance }
			}
			create_archaeological_site = random
		}
		
		clear_variable = suelg_dice
		clear_variable = suelg_digsite_chance
    }
}

# Calculate the chance for an anomaly to spawn 
planet_event = {
    id = suelg_deep_scan.4
    hide_window = yes
    is_triggered_only = yes

    immediate = {
		# log = ">> CHECK ANOMALY. FROM: [from.GetName] THIS: [This.GetName] ROOT: [root.GetName] FROMFROM: [fromfrom.GetName]"
		set_variable = { which = suelg_anomaly_chance value = @suelg_spawn_anomaly_basic_chance }

		# Calculate additional modificator from leader
		if = {
			limit = { 
				event_target:t_leader = {
					is_variable_set = suelg_l_anomaly_add_chance
				}
			}
			change_variable = { which = suelg_anomaly_chance value = event_target:t_leader.suelg_l_anomaly_add_chance }
		} else = {
			event_target:t_leader = {
				set_variable = { which = suelg_l_anomaly_add_chance value = 0 }
			}
		}

		# Calculate additional modificators from owner
		if = {
			limit = {
				event_target:t_owner = {
					has_edict = map_the_stars
				}
			}
			inline_script = { script = suelg_add_anomaly_chance_mod VAL = @suelg_map_the_start_edict_mod }
		}

		set_variable_to_random_value = { which = suelg_dice min = 0 max = 100 rounded = no }
		# log = ">> ROLL ANOMALY DICE: [This.suelg_dice] CHANCE: [This.suelg_anomaly_chance]"
		if = {
			limit = {
				# todo: conmmented for debug:
				# check_variable = { which = suelg_dice value <= suelg_anomaly_chance }
				# has_anomaly = no
				is_preventing_anomaly = no
			}
						
			planet_event = { id = suelg_deep_scan.12 } # Spawn planet anomaly
		} else = {
			event_target:t_leader = {
				change_variable = { which = suelg_l_anomaly_add_chance value = @suelg_leaders_spawn_anomaly_add_chance }
			}
		}
		
		clear_variable = suelg_dice
		clear_variable = suelg_anomaly_chance
    }
}

# Calculate the chance for an orbital deposit to spawn 
planet_event = {
    id = suelg_deep_scan.5
    hide_window = yes
    is_triggered_only = yes

	trigger = {
		suelg_can_have_orbital_deposits = yes
	}

    immediate = {
		# log = ">> CHECK DEPOSIT. FROM: [from.GetName] THIS: [This.GetName] ROOT: [root.GetName] FROMFROM: [fromfrom.GetName]"

		set_variable = { which = suelg_sum_weight value = 0 }

		# calculate basic weights and sum of succeful resource weight
		inline_script = { script = suelg_set_base_res_weights RES = "mineral" }
		inline_script = { script = suelg_set_base_res_weights RES = "energy" }
		inline_script = { script = suelg_set_base_res_weights RES = "trade" }
		inline_script = { script = suelg_set_base_res_weights RES = "alloy" }

		inline_script = { script = suelg_set_base_res_weights RES = "physics" }
		inline_script = { script = suelg_set_base_res_weights RES = "society" }
		inline_script = { script = suelg_set_base_res_weights RES = "engineering" }

		inline_script = { script = suelg_set_base_res_weights RES = "volatile_motes" }
		inline_script = { script = suelg_set_base_res_weights RES = "rare_crystals" }
		inline_script = { script = suelg_set_base_res_weights RES = "exotic_gases" }

		if = {
			limit = { can_have_minor_engineering_deposits = yes }
			if = {
				limit = { check_variable = { which = suelg_engineering_weight value = 0 } }
				change_variable = { which = suelg_sum_weight value = @suelg_spawn_engineering_weight }
			}
			set_variable = { which = suelg_engineering_weight value = @suelg_spawn_engineering_weight }
		}
		if = {
			limit = { can_have_minor_physics_deposits = yes }
			if = {
				limit = { check_variable = { which = suelg_physics_weight value = 0 } }
				change_variable = { which = suelg_sum_weight value = @suelg_spawn_engineering_weight }
			}
			set_variable = { which = suelg_physics_weight value = @suelg_spawn_physics_weight }
		}

		set_variable = { which = suelg_sub_with_null_weight value = suelg_sum_weight }
		divide_variable = { which = suelg_sub_with_null_weight value = @suelg_spawn_resource_chance }
		multiply_variable = { which = suelg_sub_with_null_weight value = 100 }

		set_variable_to_random_value = { which = suelg_res_dice min = 0 max = suelg_sub_with_null_weight rounded = no }
		# log = ">> ROLL RES DICE: [This.suelg_res_dice] SUCCESS: [This.suelg_sum_weight]  ALL: [This.suelg_sub_with_null_weight]"
		if = {
			limit = {
				check_variable = { which = suelg_res_dice value <= suelg_sum_weight }
			}
			planet_event = { id = suelg_deep_scan.7 } # Spawn resource deposit
		}
    }
}

# Add anomaly Notification
planet_event = {
    id = suelg_deep_scan.6
    hide_window = yes
    is_triggered_only = yes

	immediate = {
		event_target:t_ship = { # can't create message for in planet scope without owner
			create_message = {
				type = SUELG_ANOMALY_DETECTED
				localization = SUELG_ANOMALY_DETECTED_MESSAGE
				days = @suelg_notification_days
				target = event_target:t_planet
				variable = {
					type = name
					localization = SHIP
					scope = this
				}
				variable = {
					type = name
					localization = PLANET
					scope = event_target:t_planet
				}
			}
		}
	}
}

# Spawn resource deposit
planet_event = {
    id = suelg_deep_scan.7
    hide_window = yes
    is_triggered_only = yes

	immediate = {
		log = ">> TRYING SPAWN RES. DICE: [This.suelg_res_dice]"
		inline_script = { script = suelg_check_n_add_res_o_deposit RES = "mineral" DEP = "d_minerals_1" }
		inline_script = { script = suelg_check_n_add_res_o_deposit RES = "energy" DEP = "d_engineering_1" }
		inline_script = { script = suelg_check_n_add_res_o_deposit RES = "trade" DEP = "d_trade_value_1" }
		inline_script = { script = suelg_check_n_add_res_o_deposit RES = "alloy" DEP = "d_alloys_1" }

		inline_script = { script = suelg_check_n_add_res_o_deposit RES = "physics" DEP = "d_physics_1" }
		inline_script = { script = suelg_check_n_add_res_o_deposit RES = "society" DEP = "d_society_1" }
		inline_script = { script = suelg_check_n_add_res_o_deposit RES = "engineering" DEP = "d_engineering_1" }

		inline_script = { script = suelg_check_n_add_res_o_deposit RES = "volatile_motes" DEP = "d_volatile_motes_1" }
		inline_script = { script = suelg_check_n_add_res_o_deposit RES = "rare_crystals" DEP = "d_rare_crystals_1" }
		inline_script = { script = suelg_check_n_add_res_o_deposit RES = "exotic_gases" DEP = "d_exotic_gases_1" }

		# debug
		# if = {
		# 	limit = { 
		# 		has_megastructure = yes
		# 	}
		# 	log = ">> HAS MEGASTRUCTURE"
		# 	random_megastructure = {
		# 		limit = { is_megastructure_type = habitat_0 }
		# 		log = ">> HAS HABITAT"
		# 	}
		# }
	}
}

# Complete scan
planet_event = {
    id = suelg_deep_scan.8
    hide_window = yes
    is_triggered_only = yes

	immediate = {
		clear_variable = suelg_mineral_weight
		clear_variable = suelg_energy_weight
		clear_variable = suelg_trade_weight
		clear_variable = suelg_alloy_weight

		clear_variable = suelg_physics_weight
		clear_variable = suelg_society_weight
		clear_variable = suelg_engineering_weight

		clear_variable = suelg_volatile_motes_weight
		clear_variable = suelg_rare_crystals_weight
		clear_variable = suelg_exotic_gases_weight

		clear_variable = suelg_sum_weight
		clear_variable = suelg_sub_with_null_weight
		clear_variable = suelg_res_dice

		remove_planet_flag = new_deposit_added

		solar_system = {
			if = {
				limit = { NOT = { is_variable_set = suelg_sys_completed_scan_lvl } }
				set_variable = { which = suelg_sys_completed_scan_lvl value = 0 }
			}

			# Checking if all planets have finished their scan projects
			set_variable = { which = suelg_min_complete_lvl value = 100 }
			every_system_planet = {
				if = {
					limit = {
						suelg_can_be_scanned = yes
						check_variable = { which = suelg_completed_scan_lvl value < prev.suelg_min_complete_lvl }
					}
					solar_system = {
						set_variable = { which = suelg_min_complete_lvl value = prev.suelg_completed_scan_lvl }
					}			
				}
			}

			# Add scanned lvl modifier to stars
			if = {
				limit = { 
					NOT = {
						check_variable = { which = suelg_min_complete_lvl value = 100 }
						check_variable = { which = suelg_min_complete_lvl value = suelg_sys_completed_scan_lvl }
					}
				}

				set_variable = { which = suelg_sys_completed_scan_lvl value = suelg_min_complete_lvl }
				every_system_planet = {
					if = {
						limit = { is_star = yes }
						suelg_update_complete_scan_mod = yes # replace
					}
				}

			}

			event_target:t_owner = {
				country_event = { id = suelg_deep_scan.9 } # Update scan level
			}
		}
	}
}

# Update scan level
country_event = {
    id = suelg_deep_scan.9
    hide_window = yes
    is_triggered_only = yes

	immediate = {
		if = { 
			limit = {
				NOT = {
					is_variable_set = suelg_max_scan_level
				}
			}
			set_variable = { which = suelg_max_scan_level value = 0 }
		}

		if = { 
			limit = {
				check_variable = { which = suelg_max_scan_level value < 3 }
			}
			if = {
				limit = {
					check_variable = { which = suelg_max_scan_level value = 0 }
					has_technology = tech_sensors_2
				}
				set_variable = { which = suelg_max_scan_level value = 1 }
				set_country_flag = suelg_has_updated_scan_level
			} else_if = {
				limit = {
					check_variable = { which = suelg_max_scan_level value = 1 }
					has_technology = tech_sensors_3
				}
				set_variable = { which = suelg_max_scan_level value = 2 }
				set_country_flag = suelg_has_updated_scan_level
			} else_if = {
				limit = {
					check_variable = { which = suelg_max_scan_level value = 2 }
					has_technology = tech_sensors_4
				}
				set_variable = { which = suelg_max_scan_level value = 3 }
				set_country_flag = suelg_has_updated_scan_level
			}
		} else_if = {
			limit = {
				check_variable = { which = suelg_max_scan_level value < @suelg_max_possible_scan_lvl }
			}
			set_variable = { which = suelg_scanned_sys_count value = 0 }
			every_system_within_border = {
				limit = { 
					check_variable = { which = suelg_sys_completed_scan_lvl value >= prev.suelg_max_scan_level }
				}
				prev = {
					change_variable = { which = suelg_scanned_sys_count value = 1 }
				}
			}

			if = {
				limit = { controlled_systems < 1 }
				set_variable = { which = suelg_controlled_systems value = 1 }
			} else = {
				set_variable = { which = suelg_controlled_systems value = trigger:controlled_systems }
			}
	
			set_variable = { which = suelg_scanned_sys_percent value = suelg_scanned_sys_count }
			divide_variable = { which = suelg_scanned_sys_percent value = suelg_controlled_systems }
	
			if = {
				limit = {
					OR = {
						check_variable = { which = suelg_scanned_sys_count value > @suelg_upgrade_scanned_systems_num }
						check_variable = { which = suelg_scanned_sys_percent value >= @suelg_upgrade_scanned_systems_percent }
					}
				}
				change_variable = { which = suelg_max_scan_level value = 1 }
				set_country_flag = suelg_has_updated_scan_level
			}
	
			clear_variable = suelg_scanned_sys_count
			clear_variable = suelg_scanned_sys_percent
			clear_variable = suelg_controlled_systems
		}

		if = {
			limit = { has_country_flag = suelg_has_updated_scan_level }
			remove_country_flag = suelg_has_updated_scan_level
			create_message = {
				type = SUELG_SENSORS_IMPROVED
				localization = SUELG_SENSORS_IMPROVED_MESSAGE
				days = @suelg_notification_days
				target = this.capital_scope
				variable = {
					type = variable
					varname = suelg_max_scan_level
					localization = LVL
					scope = this
				}
			}
		}
		
	}
}

# Reset system projects and init vars
system_event = {
    id = suelg_deep_scan.10
    hide_window = yes
    is_triggered_only = yes

	immediate = {
		every_system_planet = {
			if = { # init planet variables
				limit = { 
					OR = {
						NOT = { is_variable_set = suelg_completed_scan_lvl }
						NOT = { is_variable_set = suelg_started_scan_lvl }
					}
					
				}
				set_variable = { which = suelg_completed_scan_lvl value = 0 }
				set_variable = { which = suelg_started_scan_lvl value = 0 }
			}

			if = {
				limit = {								
					suelg_can_be_scanned = yes
					check_variable = { which = suelg_started_scan_lvl value > suelg_completed_scan_lvl }
				}

				save_event_target_as = reset_planet_t
				
				# todo: figure out how to make it work. Science ships may not be orbiting a planet when they are researching a project on it
				# random_fleet_in_orbit = {
				# 	limit = {
				# 		exists = leader
				# 		leader = {
				# 			leader_class = scientist
				# 			# is_researching_special_project = suelg_deep_scan_SP_1 # add other projects
				# 		}
				# 	}

				# 	event_target:reset_planet_t = {
				# 		log = ">> DONT REMOVE THAT PLANET: [this.GetName]"
				# 		set_planet_flag = suelg_has_researcher
				# 	}
				# }

				if = {
					limit = {
						NOT = { has_planet_flag = suelg_has_researcher }
					}
					set_variable = { which = suelg_started_scan_lvl value = suelg_completed_scan_lvl }

					solar_system = {
						owner = {
							# event_target:reset_planet_t = {
							# 	log = ">> REMOVE PROJECT. PLANET: [this.GetName]"
							# }
							
							abort_special_project = { type = suelg_deep_scan_SP_1 location = event_target:reset_planet_t }
						}
					}
					
					remove_planet_flag = suelg_has_researcher
				}
			}
		}
	}
}

# Create Deep Scan Projects for system
system_event = {
    id = suelg_deep_scan.11
    hide_window = yes
    is_triggered_only = yes

	immediate = {
		every_system_planet = {
			if = {
				limit = {								
					suelg_can_be_scanned = yes
					check_variable = { which = suelg_completed_scan_lvl value < event_target:t_owner.suelg_max_scan_level }
					check_variable = { which = suelg_completed_scan_lvl value = suelg_started_scan_lvl }
				}

				change_variable = { which = suelg_started_scan_lvl value = 1 }
				log = ">> CREATE PROJECT. PLANET: [This.GetName] LVL: [This.suelg_started_scan_lvl]"

				inline_script = { script = suelg_create_project LVL = 1 }
				inline_script = { script = suelg_create_project LVL = 2 }
				inline_script = { script = suelg_create_project LVL = 3 }
				inline_script = { script = suelg_create_project LVL = 4 }
				inline_script = { script = suelg_create_project LVL = 5 }
				inline_script = { script = suelg_create_project LVL = 6 }
				inline_script = { script = suelg_create_project LVL = 7 }
				inline_script = { script = suelg_create_project LVL = 8 }
				inline_script = { script = suelg_create_project LVL = 9 }
				inline_script = { script = suelg_create_project LVL = 10 }
				inline_script = { script = suelg_create_project LVL = 11 }
				inline_script = { script = suelg_create_project LVL = 12 }
				inline_script = { script = suelg_create_project LVL = 13 }
				inline_script = { script = suelg_create_project LVL = 14 }
				inline_script = { script = suelg_create_project LVL = 15 }
			}
		}
	}
}

# Spawn planet anomaly
planet_event = {
    id = suelg_deep_scan.12
    hide_window = yes
    is_triggered_only = yes

	immediate = {
		log = ">> BEFORE SPAWN ANOMALY! THIS: [This.GetName]"
		suelg_spawn_00_anomaly = yes

		if = {
			limit = {
				has_anomaly = yes
				has_planet_flag = suelg_planet_has_new_anomaly
			} 

			planet_event = { id = suelg_deep_scan.6 } # Add anomaly Notification
		
			event_target:t_leader = {
				set_variable = { which = suelg_l_anomaly_add_chance value = 0 }
			}
			remove_planet_flag = suelg_planet_has_new_anomaly
		}
	}
}