namespace = suelg_deep_scan

#From = Planet/starbase scope
#This = Ship scope
#on_fleet_enter_orbit
fleet_event = {
    id = suelg_deep_scan.1
    hide_window = yes
    is_triggered_only = yes
	trigger = {
		# log = ">> CHECK ORBIT FROM: [from.GetName] THIS: [This.GetName] ROOT: [root.GetName]"

		From = { # planet/starbase
			is_scope_type = planet

			is_star = yes
			solar_system = {
				has_owner = yes
			}
		}
		This = { # ship
			OR = {
				is_scope_type = ship
				is_scope_type = fleet
			}
			
			is_in_combat = no

			exists = leader
			leader = {
				leader_class = scientist
			}
			exists = owner
			owner = {
				is_ai = no
				is_same_value = from.solar_system.owner
			}
		}
	}

    immediate = {
		# log = ">> RUN EVENT - FROM: [from.GetName] THIS: [This.GetName]"
		this = {
			owner = {
				save_event_target_as = t_owner
			}
		}

		from = {
			solar_system = {
				if = {
					limit = {								
						event_target:t_owner = {
							check_variable = { which = suelg_max_scan_level value > 0 }
						}
					}

					suelg_reset_system_projects = yes
					suelg_create_system_scan_projects = yes
				}
			}
		}
    }
}

#this = Ship scope
#fromfrom = Planet scope
#from = Ship scope
#suelg_deep_scan_{X}_special_project
ship_event = {
    id = suelg_deep_scan.2
    hide_window = yes
    is_triggered_only = yes

    immediate = {
		# log = ">> PROJECT COMPLETE. FROM: [from.GetName] THIS: [This.GetName] ROOT: [root.GetName] FROMFROM: [fromfrom.GetName]"
		save_event_target_as = t_ship

		leader = {
			save_event_target_as = t_leader
			owner = {
				save_event_target_as = t_owner
			}
		}
		fromfrom = {
			save_event_target_as = t_planet
			set_variable = { which = suelg_completed_scan_lvl value = suelg_started_scan_lvl }
			set_planet_flag = has_completed_project
			planet_event = { id = suelg_spawn_resource.1 } # Calculate the chance for an orbital deposit to spawn 
			planet_event = { id = suelg_deep_scan.3 } # Calculate the chance for an Archaeological site to spawn 
			planet_event = { id = suelg_spawn_anomaly.1 } # Calculate the chance for an anomaly to spawn 
			planet_event = { id = suelg_deep_scan.8 } # Complete scan
		}
    }
}

# Calculate the chance for an Archaeological site to spawn and spawn
planet_event = {
    id = suelg_deep_scan.3
    hide_window = yes
    is_triggered_only = yes

    immediate = {
		set_variable = { which = suelg_digsite_chance value = @suelg_spawn_archaeological_site_chance }
		inline_script = { script = suelg_add_ch_trait N = suelg_digsite_chance T = leader_trait_archaeologist V = 0.1 }
		inline_script = { script = suelg_add_ch_trait N = suelg_digsite_chance T = leader_trait_archaeologist_2 V = 0.2 }
		inline_script = { script = suelg_add_ch_trait N = suelg_digsite_chance T = leader_trait_collective_wisdom V = 0.05 }
		inline_script = { script = suelg_add_ch_trait N = suelg_digsite_chance T = leader_trait_collective_wisdom_2 V = 0.1 }
		inline_script = { script = suelg_add_ch_trait N = suelg_digsite_chance T = leader_trait_collective_wisdom_3 V = 0.15 }
		inline_script = { script = suelg_add_ch_trait N = suelg_digsite_chance T = leader_trait_frontier_adventurer V = 0.1 }

		set_variable_to_random_value = { which = suelg_dice min = 0 max = 100 rounded = no }

		# log = ">> ROLL Archaeological site. DICE: [This.suelg_dice] CHANCE: [This.suelg_digsite_chance]"
		if = {
			limit = {
				check_variable = { which = suelg_dice value <= suelg_digsite_chance }
			}
			create_archaeological_site = random
		}
		
		clear_variable = suelg_dice
		clear_variable = suelg_digsite_chance
    }
}

# Complete scan
planet_event = {
    id = suelg_deep_scan.8
    hide_window = yes
    is_triggered_only = yes

	immediate = {
		solar_system = {
			remove_star_flag = suelg_has_scan_projects

			# init system vars
			if = {
				limit = { NOT = { is_variable_set = suelg_sys_completed_scan_lvl } }
				set_variable = { which = suelg_sys_completed_scan_lvl value = 0 }
			}

			# Checking if all planets have finished their scan projects
			set_variable = { which = suelg_min_complete_lvl value = 100 }
			every_system_planet = {
				if = {
					limit = {
						suelg_can_be_scanned = yes
						check_variable = { which = suelg_completed_scan_lvl value < prev.suelg_min_complete_lvl }
					}
					solar_system = {
						set_variable = { which = suelg_min_complete_lvl value = prev.suelg_completed_scan_lvl }
					}			
				}

				if = {
					limit = {
						solar_system = {
							NOT = {
								has_star_flag = suelg_has_scan_projects
							}
						}	
						suelg_can_be_scanned = yes
						check_variable = { which = suelg_started_scan_lvl value > suelg_completed_scan_lvl }
					}
					solar_system = {
						set_star_flag = suelg_has_scan_projects
					}	
				}
			}

			if = {
				limit = {
					# todo: condition: ai = yes
					NOT = { has_star_flag = suelg_has_scan_projects }
				}
				event_target:t_ship = {
					ship_event = { id = suelg_auto_creator.2 } # Create scan projects near ship for AI
				}
			}

			# Add scanned lvl modifier to stars
			if = {
				limit = { 
					NOT = {
						check_variable = { which = suelg_min_complete_lvl value = 100 }
						check_variable = { which = suelg_min_complete_lvl value = suelg_sys_completed_scan_lvl }
					}
				}

				set_variable = { which = suelg_sys_completed_scan_lvl value = suelg_min_complete_lvl }
				every_system_planet = {
					if = {
						limit = { is_star = yes }
						suelg_update_complete_scan_mod = yes # todo: replace
					}
				}

			}

			event_target:t_owner = {
				country_event = { id = suelg_deep_scan.9 } # Update scan level
			}
		}
	}
}

# Update scan level
country_event = {
    id = suelg_deep_scan.9
    hide_window = yes
    is_triggered_only = yes

	immediate = {
		if = { 
			limit = {
				NOT = {
					is_variable_set = suelg_max_scan_level
				}
			}
			set_variable = { which = suelg_max_scan_level value = 0 }
		}

		if = { 
			limit = {
				check_variable = { which = suelg_max_scan_level value < 3 }
			}
			if = {
				limit = {
					check_variable = { which = suelg_max_scan_level value = 0 }
					has_technology = tech_sensors_2
				}
				set_variable = { which = suelg_max_scan_level value = 1 }
				set_country_flag = suelg_has_updated_scan_level
			} else_if = {
				limit = {
					check_variable = { which = suelg_max_scan_level value = 1 }
					has_technology = tech_sensors_3
				}
				set_variable = { which = suelg_max_scan_level value = 2 }
				set_country_flag = suelg_has_updated_scan_level
			} else_if = {
				limit = {
					check_variable = { which = suelg_max_scan_level value = 2 }
					has_technology = tech_sensors_4
				}
				set_variable = { which = suelg_max_scan_level value = 3 }
				set_country_flag = suelg_has_updated_scan_level
			}
		} else_if = {
			limit = {
				check_variable = { which = suelg_max_scan_level value < @suelg_max_possible_scan_lvl }
			}
			set_variable = { which = suelg_scanned_sys_count value = 0 }
			every_system_within_border = {
				limit = { 
					check_variable = { which = suelg_sys_completed_scan_lvl value >= prev.suelg_max_scan_level }
				}
				prev = {
					change_variable = { which = suelg_scanned_sys_count value = 1 }
				}
			}

			if = {
				limit = { controlled_systems < 1 }
				set_variable = { which = suelg_controlled_systems value = 1 }
			} else = {
				set_variable = { which = suelg_controlled_systems value = trigger:controlled_systems }
			}
	
			set_variable = { which = suelg_scanned_sys_percent value = suelg_scanned_sys_count }
			divide_variable = { which = suelg_scanned_sys_percent value = suelg_controlled_systems }
	
			if = {
				limit = {
					OR = {
						check_variable = { which = suelg_scanned_sys_count value > @suelg_upgrade_scanned_systems_num }
						check_variable = { which = suelg_scanned_sys_percent value >= @suelg_upgrade_scanned_systems_percent }
					}
				}
				change_variable = { which = suelg_max_scan_level value = 1 }
				set_country_flag = suelg_has_updated_scan_level
			}
	
			clear_variable = suelg_scanned_sys_count
			clear_variable = suelg_scanned_sys_percent
			clear_variable = suelg_controlled_systems
		}

		if = {
			# todo: no AI condition
			limit = { has_country_flag = suelg_has_updated_scan_level }
			remove_country_flag = suelg_has_updated_scan_level
			create_message = {
				type = SUELG_SENSORS_IMPROVED
				localization = SUELG_SENSORS_IMPROVED_MESSAGE
				days = @suelg_notification_days
				target = this.capital_scope
				variable = {
					type = variable
					varname = suelg_max_scan_level
					localization = LVL
					scope = this
				}
			}
		}
	}
}