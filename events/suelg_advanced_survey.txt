namespace = suelg_advanced_survey

#From = Planet/starbase scope
#This = Ship scope
#on_fleet_enter_orbit
fleet_event = {
	id = suelg_advanced_survey.1
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		# log = ">> CHECK ORBIT FROM: [from.GetName] THIS: [This.GetName] ROOT: [root.GetName]"

		From = { # planet/starbase
			is_scope_type = planet

			is_star = yes
			solar_system = {
				has_owner = yes
			}
		}
		This = { # fleet or ship?
			OR = {
				is_scope_type = ship
				is_scope_type = fleet
			}
			
			is_in_combat = no

			exists = leader
			leader = {
				leader_class = scientist
			}
			exists = owner
			owner = {
				is_ai = no
				is_same_value = from.solar_system.owner
			}
		}
	}

	immediate = {
		# log = ">> RUN EVENT - FROM: [from.GetName] THIS: [This.GetName]"
		this = {
			owner = {
				save_event_target_as = t_owner
				suelg_init_country_vars = yes
			}
			save_event_target_as = t_fleet
		}

		from = {
			save_event_target_as = t_planet
			solar_system = {
				if = {
					limit = {								
						event_target:t_owner = {
							check_variable = { which = suelg_max_scan_level value > 0 }
						}
					}

					suelg_reset_system_projects = yes
					suelg_create_system_scan_projects = yes
					event_target:t_fleet = {
						fleet_event = { id = suelg_auto_survey.1 } # Check if the fleet should be automatically order to research a next Advanced survey project
					}
				}
			}
		}
	}
}

# Run effects after complete project
planet_event = {
	id = suelg_advanced_survey.3
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		# log = ">> COMPLETE SP EFFECTS"
		save_event_target_as = t_planet
		suelg_add_exp_for_leader = yes

		set_variable = { which = suelg_completed_advanced_survey_lvl value = suelg_started_advanced_survey_lvl }
		planet_event = { id = suelg_spawn_resource.1 } # Calculate the chance for an orbital deposit to spawn 
		planet_event = { id = suelg_spawn_archeology.1 } # Calculate the chance for an Archaeological site and spawn 
		planet_event = { id = suelg_spawn_anomaly.1 } # Calculate the chance for an anomaly to spawn 
		planet_event = { id = suelg_spawn_planetary_deposits.1 } # Calculate the chance for an planetary deposit spawn
		planet_event = { id = suelg_advanced_survey.8 } # Complete scan

		event_target:t_ship = {
			suelg_accelerate_ship_after_sp = yes
			fleet = {
				fleet_event = { id = suelg_auto_survey.1 } # Check if the fleet should be automatically order to research a next Advanced survey project
			}
		}
	}
}

# Complete scan
planet_event = {
    id = suelg_advanced_survey.8
    hide_window = yes
    is_triggered_only = yes

	immediate = {
		suelg_post_fix_has_scan_projects = yes

		solar_system = {
			remove_star_flag = suelg_has_scan_projects

			# init system vars
			if = {
				limit = { NOT = { is_variable_set = suelg_sys_completed_scan_lvl } }
				set_variable = { which = suelg_sys_completed_scan_lvl value = 0 }
			}

			# Checking if all planets have finished their scan projects
			set_variable = { which = suelg_min_complete_lvl value = 100 }
			every_system_planet = {
				if = {
					limit = {
						suelg_can_be_scanned = yes
						check_variable = { which = suelg_completed_advanced_survey_lvl value < prev.suelg_min_complete_lvl }
					}
					solar_system = {
						set_variable = { which = suelg_min_complete_lvl value = prev.suelg_completed_advanced_survey_lvl }
					}			
				}

				if = {
					limit = {
						solar_system = {
							NOT = {
								has_star_flag = suelg_has_scan_projects
							}
						}	
						suelg_can_be_scanned = yes
						check_variable = { which = suelg_started_advanced_survey_lvl value > suelg_completed_advanced_survey_lvl }
					}
					solar_system = {
						set_star_flag = suelg_has_scan_projects
					}	
				}
			}

			# if it is an AI, then upon completion of the current system survey, create new projects in the nearest system
			if = {
				limit = {
					NOT = { has_star_flag = suelg_has_scan_projects }
					solar_system = {
						owner = { is_ai = yes }
					}
				}
				event_target:t_ship = {
					if = {
						limit = { 
							owner = { is_ai = yes }
						}
						ship_event = { id = suelg_auto_creator.2 } # Create scan projects near ship for AI
					}
				}
			}

			# Add scanned lvl modifier to stars
			if = {
				limit = { 
					NOT = {
						check_variable = { which = suelg_min_complete_lvl value = 100 }
						check_variable = { which = suelg_min_complete_lvl value = suelg_sys_completed_scan_lvl }
					}
				}

				set_variable = { which = suelg_sys_completed_scan_lvl value = suelg_min_complete_lvl }
				every_system_planet = {
					if = {
						limit = { is_star = yes }
						suelg_update_complete_scan_mod = yes # todo: replace
					}
				}
			}
		}
	}
}

# Update scan level
country_event = {
    id = suelg_advanced_survey.9
    hide_window = yes
    is_triggered_only = yes

	immediate = {
		# log = ">> Update scan level"
		suelg_init_country_vars = yes

		if = { limit = { always = no } }
		inline_script = { script = suelg_ef_upgrade_country_advanced_survey_lvl LVL = 25 }
		inline_script = { script = suelg_ef_upgrade_country_advanced_survey_lvl LVL = 24 }
		inline_script = { script = suelg_ef_upgrade_country_advanced_survey_lvl LVL = 23 }
		inline_script = { script = suelg_ef_upgrade_country_advanced_survey_lvl LVL = 22 }
		inline_script = { script = suelg_ef_upgrade_country_advanced_survey_lvl LVL = 21 }
		inline_script = { script = suelg_ef_upgrade_country_advanced_survey_lvl LVL = 20 }
		inline_script = { script = suelg_ef_upgrade_country_advanced_survey_lvl LVL = 19 }
		inline_script = { script = suelg_ef_upgrade_country_advanced_survey_lvl LVL = 18 }
		inline_script = { script = suelg_ef_upgrade_country_advanced_survey_lvl LVL = 17 }
		inline_script = { script = suelg_ef_upgrade_country_advanced_survey_lvl LVL = 16 }
		inline_script = { script = suelg_ef_upgrade_country_advanced_survey_lvl LVL = 15 }
		inline_script = { script = suelg_ef_upgrade_country_advanced_survey_lvl LVL = 14 }
		inline_script = { script = suelg_ef_upgrade_country_advanced_survey_lvl LVL = 13 }
		inline_script = { script = suelg_ef_upgrade_country_advanced_survey_lvl LVL = 12 }
		inline_script = { script = suelg_ef_upgrade_country_advanced_survey_lvl LVL = 11 }
		inline_script = { script = suelg_ef_upgrade_country_advanced_survey_lvl LVL = 10 }
		inline_script = { script = suelg_ef_upgrade_country_advanced_survey_lvl LVL = 9 }
		inline_script = { script = suelg_ef_upgrade_country_advanced_survey_lvl LVL = 8 }
		inline_script = { script = suelg_ef_upgrade_country_advanced_survey_lvl LVL = 7 }
		inline_script = { script = suelg_ef_upgrade_country_advanced_survey_lvl LVL = 6 }
		inline_script = { script = suelg_ef_upgrade_country_advanced_survey_lvl LVL = 5 }
		inline_script = { script = suelg_ef_upgrade_country_advanced_survey_lvl LVL = 4 }
		inline_script = { script = suelg_ef_upgrade_country_advanced_survey_lvl LVL = 3 }
		inline_script = { script = suelg_ef_upgrade_country_advanced_survey_lvl LVL = 2 }
		inline_script = { script = suelg_ef_upgrade_country_advanced_survey_lvl LVL = 1 }
	}
}

# on_system_occupied
# THIS = System: system being occupied
# FROMFROM = Country: Original owner of the system
system_event = {
    id = suelg_advanced_survey.10
    hide_window = yes
    is_triggered_only = yes

	immediate = {
		FROMFROM = {
			save_event_target_as = t_owner
		}

		suelg_reset_system_projects = yes

		event_target:t_owner = {
			if = {
				limit = { is_ai = yes }
				country_event = { id = suelg_auto_creator.1 } # Search systems and create projects for AI's ships and capital system
			}
		}
	} 
}

# on_system_lost
# FromFrom = country (new owner)
# This = country (previous owner)
country_event = {
    id = suelg_advanced_survey.11
    hide_window = yes
    is_triggered_only = yes

	immediate = {
		save_event_target_as = t_owner
		from = {
			suelg_reset_system_projects = yes
		}
	} 
}

country_event = {
	id = suelg_advanced_survey.12
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		save_event_target_as = t_owner

		event_target:t_owner = {
			every_system_within_border = {
				suelg_reset_system_projects = yes
			}
		}
	}
	after = {
		set_timed_country_flag = {
			flag = suelg_clear_project_started
			days = 2
		}
	}
}