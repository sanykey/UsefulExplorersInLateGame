namespace = suelg_debug

# build starbase near selected ship or selected planet or capital
event = {
	id = suelg_debug.1
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				is_scope_type = country
			}
			save_event_target_as = t_owner
			capital_scope.solar_system = {
				closest_system = {
					min_steps = 1
					use_bypasses = no
					limit = {
						has_owner = no
					}
					create_starbase = {
						size = starbase_outpost
						owner = event_target:t_owner
					}
				}
			}
		} else_if = {
			limit = {
				OR = {
					is_scope_type = ship
					is_scope_type = fleet
				}
				exists = owner
			}
			owner = {
				save_event_target_as = t_owner
			}
			closest_system = {
				min_steps = 0
				use_bypasses = no
				limit = {
					has_owner = no
				}
				create_starbase = {
					size = starbase_outpost
					owner = event_target:t_owner
				}
			}
		} else_if = {
			limit = {
				is_scope_type = planet
			}
			random_playable_country = {
				limit = {
					is_ai = no
				}
				save_event_target_as = t_owner
			}
			solar_system = {
				closest_system = {
					min_steps = 0
					use_bypasses = no
					limit = {
						has_owner = no
					}
					create_starbase = {
						size = starbase_outpost
						owner = event_target:t_owner
					}
				}
			}
		} else = {
			random_playable_country = {
				limit = {
					is_ai = no
				}
				save_event_target_as = t_owner
			}
			event_target:t_owner = {
				capital_scope.solar_system = {
					closest_system = {
						min_steps = 1
						use_bypasses = no
						limit = {
							has_owner = no
						}
						create_starbase = {
							size = starbase_outpost
							owner = event_target:t_owner
						}
					}
				}
			}
		}
	}
}

# upgrade max scan lvl
event = {
	id = suelg_debug.2
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = { is_scope_type = country }
			save_event_target_as = t_owner
		} else = {
			random_playable_country = {
				limit = {
					is_ai = no
				}
				save_event_target_as = t_owner
			}
		}

		event_target:t_owner = {
			suelg_debug_upgrade_sp_lvl = yes
		}
	}
}

# clear all projects
event = {
	id = suelg_debug.3
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = { is_scope_type = country }
			save_event_target_as = t_owner
		} else = {
			random_playable_country = {
				limit = {
					is_ai = no
				}
				save_event_target_as = t_owner
			}
		}

		event_target:t_owner = {
			every_system_within_border = {
				suelg_reset_system_projects = yes
			}
		}
	}
}

# create projects in a random system closest to the capital in which this is available
event = {
	id = suelg_debug.4
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = { is_scope_type = country }
			save_event_target_as = t_owner
		} else_if = {
			limit = { is_scope_type = planet }
			solar_system = {
				suelg_create_system_scan_projects = yes
			}
		} else = {
			random_playable_country = {
				limit = {
					is_ai = no
				}
				save_event_target_as = t_owner
			}
		}

		event_target:t_owner = {
			suelg_add_scan_project_near_capital = yes
		}
	}
}

# upgrade max scan lvl for all countries
event = {
	id = suelg_debug.5
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		every_playable_country = {
			save_event_target_as = t_owner
			suelg_debug_upgrade_sp_lvl = yes
		}
	}
}

# remove all deposits in planet
planet_event = {
	id = suelg_debug.6
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		clear_deposits = yes
	}
}

# switch guaranteed deposits spawn on/off
country_event = {
	id = suelg_debug.7
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				has_country_flag = suelg_guaranteed_deposits_spawn
			}
			remove_country_flag = suelg_guaranteed_deposits_spawn
			create_message = {
				type = SUELG_DEBUG
				localization = SUELG_DEBUG_GUARANTEED_DEPOSITS_OFF
				days = @suelg_debug_notification_days
			}
		} else = {
			set_country_flag = suelg_guaranteed_deposits_spawn
			create_message = {
				type = SUELG_DEBUG
				localization = SUELG_DEBUG_GUARANTEED_DEPOSITS_ON
				days = @suelg_debug_notification_days
			}
		}
	}
}

# switch fast projects completion on/off
country_event = {
	id = suelg_debug.8
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				has_country_flag = suelg_debug_instant_project_completion
			}
			remove_country_flag = suelg_debug_instant_project_completion
			create_message = {
				type = SUELG_DEBUG
				localization = SUELG_DEBUG_INSTANT_PROJECT_COMPLETION_OFF
				days = @suelg_debug_notification_days
			}
		} else = {
			set_country_flag = suelg_debug_instant_project_completion
			create_message = {
				type = SUELG_DEBUG
				localization = SUELG_DEBUG_INSTANT_PROJECT_COMPLETION_ON
				days = @suelg_debug_notification_days
			}
		}
	}
}

# switch anomaly spawn on/always/off
country_event = {
	id = suelg_debug.9
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				NOT = {
					has_country_flag = suelg_debug_anomaly_always_spawn
					has_country_flag = suelg_debug_anomaly_not_spawn
				}
			}
			remove_country_flag = suelg_debug_anomaly_not_spawn
			set_country_flag = suelg_debug_anomaly_always_spawn
			create_message = { type = SUELG_DEBUG localization = SUELG_DEBUG_ANOMALY_SPAWN_ALWAYS days = @suelg_debug_notification_days }
		} else_if = {
			limit = { has_country_flag = suelg_debug_anomaly_always_spawn }
			remove_country_flag = suelg_debug_anomaly_always_spawn
			set_country_flag = suelg_debug_anomaly_not_spawn
			create_message = { type = SUELG_DEBUG localization = SUELG_DEBUG_ANOMALY_SPAWN_OFF days = @suelg_debug_notification_days }
		} else = {
			remove_country_flag = suelg_debug_anomaly_always_spawn
			remove_country_flag = suelg_debug_anomaly_not_spawn
			create_message = { type = SUELG_DEBUG localization = SUELG_DEBUG_ANOMALY_SPAWN_ON days = @suelg_debug_notification_days }
		}
	}
}

# Instantly complete projects in the system using the nearest science ship (planet/ship scope)
event = {
	id = suelg_debug.10
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			is_scope_type = planet
			is_scope_type = fleet
			is_scope_type = ship
		}
		solar_system = {
			exists = owner
		}
	}

	immediate = {
		solar_system = {
			save_event_target_as = t_solar_system

			owner = {
				save_event_target_as = t_owner
				ordered_owned_fleet = {
					limit = {
						exists = leader
						leader = {
							leader_class = scientist
						}
						exists = owner
					}
					position = 0
					order_by = value:suelg_closest_fleet_2system
					inverse = yes
	
					random_controlled_ship = {
						save_event_target_as = t_ship
					}
				}
			}

			if = {
				limit = {
					exists = event_target:t_ship
				}
	
				every_system_planet = {
					if = {
						limit = {
							is_variable_set = suelg_started_advanced_survey_lvl
							is_variable_set = suelg_completed_advanced_survey_lvl
							check_variable = { which = suelg_started_advanced_survey_lvl value > suelg_completed_advanced_survey_lvl }
						}
						planet_event = { id = suelg_advanced_survey.3 } # Run effects after complete project

						save_event_target_as = t_planet
						event_target:t_owner = {
							suelg_abort_advanced_survey_SP = yes
						}
					}
				}
			}
		}
	}
}


# Create projects in the system where the allocated ship or selected planet is located (planet/ship scope)
event = {
	id = suelg_debug.11
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			is_scope_type = planet
			is_scope_type = fleet
			is_scope_type = ship
		}
		solar_system = {
			exists = owner
		}
	}

	immediate = {
		solar_system = {
			suelg_create_system_scan_projects = yes
		}
	}
}